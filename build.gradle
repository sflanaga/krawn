/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	// https://mvnrepository.com/artifact/commons-io/commons-io
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	// https://mvnrepository.com/artifact/org.codehaus.jettison/jettison
	compile group: 'org.codehaus.jettison', name: 'jettison', version: '1.3.2'
	
	compile group: 'org.zeroturnaround', name: 'zt-exec', version: '1.9'
	compile group: 'org.zeroturnaround', name: 'zt-process-killer', version: '1.7'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'
	
	compile group: 'com.typesafe', name: 'config', version: '1.3.1'
		
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    compile(group: 'joda-time', name: 'joda-time', version: '2.8.2') {}

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes (
        	"Main-Class": "org.krawn.KrawnManager",
        	"Implementation-Title": "krawn",
        	"Implementation-Version": version,
        	"Build-Host": getDesc(),
        	"Class-Path": './ ' + configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
        )
    }
}


task thirdParty( type: Copy, dependsOn: 'compileJava') {
    into "./build/depjars"
    from configurations.runtime
}


def getBuildNumber() {
        def os = new ByteArrayOutputStream()
        exec {
                // change to 'hg id -i' for the global revision id
                // change to 'git rev-parse HEAD' for git hash
                commandLine 'hg id -n -i -b -t'.split()
                standardOutput = os;
        }
        return os.toString().trim()
}

def getDesc() {
        def buildtime = (new Date()).format('yyyy-MM-dd HH:mm')
        def opersys = System.properties['os.name'] + ' ' + System.properties['os.version']
        def user = System.properties['user.name']
        def javaver = System.properties['java.specification.version']
        return "Sprint" + "  buildtime: " + buildtime +
                "  os: " + opersys +
                "  built by:" + user +
                "  javaver:" + javaver +
                "  hostname/ip: " + InetAddress.getLocalHost().getHostName() + " / " + InetAddress.getLocalHost().getHostAddress() +
                "  buildrev: NA"  +
                "  project_dir: " + projectDir
}


